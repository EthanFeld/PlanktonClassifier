{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# pip install pandas pyarrow pillow  # (Pillow only if you later want to open images)\n","from google.colab import drive\n","from pathlib import Path\n","import re\n","import pandas as pd\n","import numpy as np\n","# ==== EDIT THESE ====\n","IMAGES_ROOT = Path(\"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/2014\")  # folder containing subfolders per label\n","BIN_TIME_CSV = Path(\"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/mvco_2013-2014_bins.csv\")  # columns: bin_id, time\n","ENV_TS_CSV  = Path(\"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/asit_data_2024.csv\")   # columns: time, var1, var2, ...\n","TIMEZONE = \"UTC\"  # e.g., \"UTC\" or \"America/New_York\" if your timestamps need tz\n","OUT_CSV = Path(\"/content/drive/MyDrive/Plankton/ifcb_merged_dataframe.csv\")  # or .csv\n","# ====================\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"piaf4E3QPa-t","executionInfo":{"status":"ok","timestamp":1755812008826,"user_tz":420,"elapsed":28342,"user":{"displayName":"Ethan Feldman","userId":"01965624025368250252"}},"outputId":"ebd8bf22-59cb-4a8a-c3d1-ccc767dc4956"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["\n","\n","# Accept common image extensions\n","EXTS = {\".png\", \".jpg\", \".jpeg\", \".tif\", \".tiff\", \".bmp\", \".gif\"}\n","BIN_ID_RE = re.compile(r\"(IFCB\\d?_\\d{4}_\\d{3}_\\d{6})\")\n","\n","image_records = []\n","for label_dir in IMAGES_ROOT.iterdir():\n","    if not label_dir.is_dir():\n","        continue\n","    label = label_dir.name\n","    if label == \"mix\" or label == \"detritus\":\n","        continue\n","    for p in label_dir.rglob(\"*\"):\n","        if p.is_file() and p.suffix.lower() in EXTS:\n","            m = BIN_ID_RE.search(p.name)\n","            if not m:\n","                # If the file name doesn't contain the bin id, try the parent name (rare but just in case)\n","                m = BIN_ID_RE.search(p.stem)\n","            if m:\n","                bin_id = m.group(1)\n","                image_records.append({\"image_path\": str(p), \"label\": label, \"bin_id\": bin_id})\n","\n","images_df = pd.DataFrame(image_records).drop_duplicates()\n","print(f\"Found {len(images_df):,} images across {images_df['label'].nunique()} labels.\")\n","images_df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"rT5EmojiSfKv","executionInfo":{"status":"ok","timestamp":1755812071164,"user_tz":420,"elapsed":59595,"user":{"displayName":"Ethan Feldman","userId":"01965624025368250252"}},"outputId":"1eaf78e2-2b41-41d6-a19d-b1108473fe46"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 18,426 images across 57 labels.\n"]},{"output_type":"execute_result","data":{"text/plain":["                                          image_path     label  \\\n","0  /content/drive/MyDrive/Plankton/WHOI_unzipped_...  Akashiwo   \n","1  /content/drive/MyDrive/Plankton/WHOI_unzipped_...    amoeba   \n","2  /content/drive/MyDrive/Plankton/WHOI_unzipped_...    amoeba   \n","3  /content/drive/MyDrive/Plankton/WHOI_unzipped_...    amoeba   \n","4  /content/drive/MyDrive/Plankton/WHOI_unzipped_...    amoeba   \n","\n","                  bin_id  \n","0  IFCB1_2014_277_165430  \n","1  IFCB1_2014_188_215702  \n","2  IFCB1_2014_188_222013  \n","3  IFCB1_2014_188_224330  \n","4  IFCB1_2014_270_212839  "],"text/html":["\n","  <div id=\"df-eed299d2-96a0-424d-9cad-a3d8597023a6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_path</th>\n","      <th>label</th>\n","      <th>bin_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","      <td>Akashiwo</td>\n","      <td>IFCB1_2014_277_165430</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","      <td>amoeba</td>\n","      <td>IFCB1_2014_188_215702</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","      <td>amoeba</td>\n","      <td>IFCB1_2014_188_222013</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","      <td>amoeba</td>\n","      <td>IFCB1_2014_188_224330</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","      <td>amoeba</td>\n","      <td>IFCB1_2014_270_212839</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eed299d2-96a0-424d-9cad-a3d8597023a6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-eed299d2-96a0-424d-9cad-a3d8597023a6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-eed299d2-96a0-424d-9cad-a3d8597023a6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c7faba62-8536-42a0-acdb-af42502c68c0\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c7faba62-8536-42a0-acdb-af42502c68c0')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c7faba62-8536-42a0-acdb-af42502c68c0 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"images_df","summary":"{\n  \"name\": \"images_df\",\n  \"rows\": 18426,\n  \"fields\": [\n    {\n      \"column\": \"image_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18426,\n        \"samples\": [\n          \"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/2014/Cylindrotheca/IFCB5_2014_238_215151_03428.png\",\n          \"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/2014/dino30/IFCB1_2014_176_153037_01301.png\",\n          \"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/2014/dino30/IFCB1_2014_188_222013_04271.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 57,\n        \"samples\": [\n          \"Akashiwo\",\n          \"bead\",\n          \"Dinophysis\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bin_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 134,\n        \"samples\": [\n          \"IFCB5_2014_360_005055\",\n          \"IFCB1_2014_150_194713\",\n          \"IFCB1_2014_176_083246\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["bin_time_df = pd.read_csv(BIN_TIME_CSV)\n","assert {\"bin_id\", \"time\"}.issubset(bin_time_df.columns)\n","\n","# Parse ISO 8601 format like 2006-06-06T22:02:00Z\n","bin_time_df[\"time\"] = pd.to_datetime(\n","    bin_time_df[\"time\"], utc=True, errors=\"coerce\", format=\"ISO8601\"\n",")\n","\n","bin_time_df = bin_time_df.dropna(subset=[\"time\"])\n","\n"],"metadata":{"id":"V8A5qzorSlar","executionInfo":{"status":"ok","timestamp":1755812071595,"user_tz":420,"elapsed":426,"user":{"displayName":"Ethan Feldman","userId":"01965624025368250252"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# --- Step 5 (robust): Load environment CSV and align/interpolate to image times ---\n","\n","import pandas as pd\n","import numpy as np\n","\n","# Config\n","NEAREST_TOL = pd.Timedelta(\"12h\")     # tolerance for nearest fills when interpolation can't fill\n","USE_NEAREST_FOR_OUT_OF_RANGE = True   # set False to leave NaNs when outside env coverage\n","ENV_LOCAL_TZ = None                   # e.g., \"America/New_York\" if env times are local clock times\n","\n","# 0) Helper to robustly parse times to UTC-aware\n","def parse_to_utc(s, fmt=None, assume_local_tz=None):\n","    # Normalize whitespace\n","    if s.dtype == \"object\":\n","        s = s.astype(str).str.replace(r\"\\s+\", \" \", regex=True).str.strip()\n","    # First try provided format\n","    dt = None\n","    if fmt is not None:\n","        dt = pd.to_datetime(s, errors=\"coerce\", format=fmt)\n","    # Fallback to inference if needed\n","    if dt is None or dt.isna().any():\n","        dt2 = pd.to_datetime(s, errors=\"coerce\", infer_datetime_format=True)\n","        if dt is None:\n","            dt = dt2\n","        else:\n","            dt = dt.fillna(dt2)\n","    # If still NaT, final fallback: no change\n","    # Localize/convert to UTC\n","    if assume_local_tz:\n","        # interpret parsed times as local timezone, then convert to UTC\n","        dt = dt.dt.tz_localize(assume_local_tz, nonexistent=\"shift_forward\", ambiguous=\"NaT\").dt.tz_convert(\"UTC\")\n","    else:\n","        # treat times as already UTC clock times\n","        if dt.dt.tz is None:\n","            dt = dt.dt.tz_localize(\"UTC\")\n","        else:\n","            dt = dt.dt.tz_convert(\"UTC\")\n","    return dt\n","\n","# 1) Load and parse environment data\n","env_df = pd.read_csv(ENV_TS_CSV)\n","\n","# If your time column is named 'atime', map to 'time' and drop original to avoid confusion\n","if \"time\" not in env_df.columns and \"atime\" in env_df.columns:\n","    env_df = env_df.rename(columns={\"atime\": \"time\"})\n","\n","assert \"time\" in env_df.columns, \"env_vars.csv must include a 'time' (or 'atime') column\"\n","\n","# Parse strings like \"8/2/2004  8:20:00 PM\" (allow extra spaces); fallback to inference if needed\n","env_df[\"time\"] = parse_to_utc(\n","    env_df[\"time\"],\n","    fmt=\"%m/%d/%Y %I:%M:%S %p\",\n","    assume_local_tz=ENV_LOCAL_TZ,   # set to your local tz if env times are local clock times\n",")\n","\n","# Drop unparsable rows and sort\n","env_df = env_df.dropna(subset=[\"time\"]).sort_values(\"time\").reset_index(drop=True)\n","\n","# Separate numeric vs non-numeric columns (excluding 'time')\n","non_time_cols = [c for c in env_df.columns if c != \"time\"]\n","num_cols = env_df[non_time_cols].select_dtypes(include=\"number\").columns.tolist()\n","other_cols = [c for c in non_time_cols if c not in num_cols]\n","\n","# 2) Build numeric frame for interpolation (if any numeric cols exist)\n","if num_cols:\n","    env_num = env_df[[\"time\"] + num_cols].set_index(\"time\").sort_index()\n","else:\n","    env_num = pd.DataFrame(index=pd.DatetimeIndex([], tz=\"UTC\"))\n","\n","# Ensure we have the image times from your bin/image table (UTC-aware)\n","# If you built img_time_df in Step 4, prefer that; otherwise bin_time_df is okay.\n","image_times = pd.to_datetime(\n","    (img_time_df if \"img_time_df\" in globals() else bin_time_df)[\"time\"],\n","    errors=\"coerce\",\n",")\n","# Normalize/convert to UTC-aware\n","if image_times.dt.tz is None:\n","    image_times = image_times.dt.tz_localize(\"UTC\")\n","else:\n","    image_times = image_times.dt.tz_convert(\"UTC\")\n","\n","# Clean and sort image_times\n","image_times = pd.DatetimeIndex(image_times.dropna().unique()).sort_values()\n","\n","# Sanity: print time windows to ensure overlap\n","if len(env_df):\n","    print(\"ENV time range (UTC):\", env_df[\"time\"].min(), \"→\", env_df[\"time\"].max())\n","if len(image_times):\n","    print(\"IMG time range (UTC):\", image_times.min(), \"→\", image_times.max())\n","\n","# 3) Interpolate numeric vars to image times\n","if num_cols and len(env_df):\n","    # Union index: env sample times + image times\n","    union_index = env_num.index.union(image_times)\n","    env_num_on_union = env_num.reindex(union_index).sort_index()\n","\n","    # Time-based linear interpolation\n","    env_num_interp = env_num_on_union.interpolate(method=\"time\", limit_direction=\"both\")\n","\n","    # Pull rows at image times\n","    env_at_imgs = env_num_interp.loc[image_times].reset_index().rename(columns={\"index\": \"time\"})\n","else:\n","    # No numeric columns to interpolate; just make a time column to merge on later\n","    env_at_imgs = pd.DataFrame({\"time\": image_times})\n","\n","# 4) (Optional) Fill remaining NaNs (likely out-of-range) via nearest neighbor\n","if USE_NEAREST_FOR_OUT_OF_RANGE and num_cols:\n","    needs_nearest = env_at_imgs[num_cols].isna().all(axis=1)\n","    if needs_nearest.any():\n","        env_num_source = env_df[[\"time\"] + num_cols].sort_values(\"time\")\n","        nearest_fill = pd.merge_asof(\n","            left=env_at_imgs.loc[needs_nearest, [\"time\"]].sort_values(\"time\"),\n","            right=env_num_source,\n","            on=\"time\",\n","            direction=\"nearest\",\n","            tolerance=NEAREST_TOL if pd.notna(NEAREST_TOL) else None,\n","        )\n","        # Put back the nearest numeric values where interpolation failed\n","        for c in num_cols:\n","            env_at_imgs.loc[needs_nearest, c] = nearest_fill[c].values\n","\n","# 5) (Optional) Attach non-numeric columns by nearest time (no interpolation)\n","if other_cols:\n","    env_other = env_df[[\"time\"] + other_cols].sort_values(\"time\")\n","    env_other_at_imgs = pd.merge_asof(\n","        left=pd.DataFrame({\"time\": image_times}).sort_values(\"time\"),\n","        right=env_other,\n","        on=\"time\",\n","        direction=\"nearest\",\n","        tolerance=NEAREST_TOL if pd.notna(NEAREST_TOL) else None,\n","    )\n","    env_merged = env_at_imgs.merge(env_other_at_imgs, on=\"time\", how=\"left\", suffixes=(\"\", \"_nearest\"))\n","else:\n","    env_merged = env_at_imgs\n","\n","# Final diagnostics\n","if num_cols:\n","    coverage = env_merged[num_cols].notna().all(axis=1).mean()\n","    print(f\"Interpolated env coverage: {coverage:.1%} over {len(env_merged)} image timestamps.\")\n","else:\n","    print(f\"No numeric env columns found; attached only non-numeric (if any) to {len(env_merged)} image timestamps.\")\n","\n","# Peek\n","env_merged.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":302},"id":"efEry3E1SpDy","executionInfo":{"status":"ok","timestamp":1755812080648,"user_tz":420,"elapsed":9049,"user":{"displayName":"Ethan Feldman","userId":"01965624025368250252"}},"outputId":"bdfc8e62-01f9-4967-d059-fdb682857ec7"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-1342552627.py:22: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n","  dt2 = pd.to_datetime(s, errors=\"coerce\", infer_datetime_format=True)\n"]},{"output_type":"stream","name":"stdout","text":["ENV time range (UTC): 2004-08-02 20:20:00+00:00 → 2024-12-31 23:40:00+00:00\n","IMG time range (UTC): 2013-01-01 00:15:31+00:00 → 2014-12-31 23:50:57+00:00\n","Interpolated env coverage: 100.0% over 42403 image timestamps.\n"]},{"output_type":"execute_result","data":{"text/plain":["                       time  wspd_u_mean  wspd_u_std  wspd_v_mean  wspd_v_std  \\\n","0 2013-01-01 00:15:31+00:00    -3.848285    0.320087    -0.369867    0.183550   \n","1 2013-01-01 00:55:33+00:00    -3.848215    0.320070    -0.369757    0.183546   \n","2 2013-01-01 01:19:05+00:00    -3.848174    0.320061    -0.369692    0.183544   \n","\n","   air_temp_mean  air_temp_std  air_rh_mean  air_rh_std  air_press_mean  \\\n","0       3.443958      0.038767    66.163042    1.696692     1010.056042   \n","1       3.833250      0.050665    68.887500    2.121790     1009.544500   \n","2       4.090833      0.057725    67.710000    1.576712     1009.022917   \n","\n","   air_press_std  water_temp_mean  water_temp_std  water_salinity_mean  \\\n","0       0.151690         5.327324        0.049688            31.652189   \n","1       0.155883         5.672413        0.022122            31.698107   \n","2       0.148596         5.721854        0.003458            31.698138   \n","\n","   water_salinity_std  water_cond_mean  water_cond_std  \n","0            0.008103         3.082534        0.004879  \n","1            0.003112         3.115553        0.001890  \n","2            0.002954         3.119908        0.000046  "],"text/html":["\n","  <div id=\"df-7521c55f-0ea7-4a6c-8281-b9c6092599db\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>time</th>\n","      <th>wspd_u_mean</th>\n","      <th>wspd_u_std</th>\n","      <th>wspd_v_mean</th>\n","      <th>wspd_v_std</th>\n","      <th>air_temp_mean</th>\n","      <th>air_temp_std</th>\n","      <th>air_rh_mean</th>\n","      <th>air_rh_std</th>\n","      <th>air_press_mean</th>\n","      <th>air_press_std</th>\n","      <th>water_temp_mean</th>\n","      <th>water_temp_std</th>\n","      <th>water_salinity_mean</th>\n","      <th>water_salinity_std</th>\n","      <th>water_cond_mean</th>\n","      <th>water_cond_std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-01-01 00:15:31+00:00</td>\n","      <td>-3.848285</td>\n","      <td>0.320087</td>\n","      <td>-0.369867</td>\n","      <td>0.183550</td>\n","      <td>3.443958</td>\n","      <td>0.038767</td>\n","      <td>66.163042</td>\n","      <td>1.696692</td>\n","      <td>1010.056042</td>\n","      <td>0.151690</td>\n","      <td>5.327324</td>\n","      <td>0.049688</td>\n","      <td>31.652189</td>\n","      <td>0.008103</td>\n","      <td>3.082534</td>\n","      <td>0.004879</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-01-01 00:55:33+00:00</td>\n","      <td>-3.848215</td>\n","      <td>0.320070</td>\n","      <td>-0.369757</td>\n","      <td>0.183546</td>\n","      <td>3.833250</td>\n","      <td>0.050665</td>\n","      <td>68.887500</td>\n","      <td>2.121790</td>\n","      <td>1009.544500</td>\n","      <td>0.155883</td>\n","      <td>5.672413</td>\n","      <td>0.022122</td>\n","      <td>31.698107</td>\n","      <td>0.003112</td>\n","      <td>3.115553</td>\n","      <td>0.001890</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-01-01 01:19:05+00:00</td>\n","      <td>-3.848174</td>\n","      <td>0.320061</td>\n","      <td>-0.369692</td>\n","      <td>0.183544</td>\n","      <td>4.090833</td>\n","      <td>0.057725</td>\n","      <td>67.710000</td>\n","      <td>1.576712</td>\n","      <td>1009.022917</td>\n","      <td>0.148596</td>\n","      <td>5.721854</td>\n","      <td>0.003458</td>\n","      <td>31.698138</td>\n","      <td>0.002954</td>\n","      <td>3.119908</td>\n","      <td>0.000046</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7521c55f-0ea7-4a6c-8281-b9c6092599db')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7521c55f-0ea7-4a6c-8281-b9c6092599db button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7521c55f-0ea7-4a6c-8281-b9c6092599db');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-efaef36e-32ba-4d78-9103-b4af778f89ef\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-efaef36e-32ba-4d78-9103-b4af778f89ef')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-efaef36e-32ba-4d78-9103-b4af778f89ef button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"env_merged","summary":"{\n  \"name\": \"env_merged\",\n  \"rows\": 42403,\n  \"fields\": [\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2013-01-01 00:15:31+00:00\",\n        \"max\": \"2014-12-31 23:50:57+00:00\",\n        \"num_unique_values\": 42403,\n        \"samples\": [\n          \"2014-05-19 07:28:30+00:00\",\n          \"2014-12-18 04:19:51+00:00\",\n          \"2013-10-20 07:10:40+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_u_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.64262696200871,\n        \"min\": -20.20675,\n        \"max\": 23.232666666666667,\n        \"num_unique_values\": 42010,\n        \"samples\": [\n          -3.727832985572128,\n          -3.6414211800634404,\n          -5.840325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_u_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.438353218956557,\n        \"min\": 0.0,\n        \"max\": 20.77316,\n        \"num_unique_values\": 41668,\n        \"samples\": [\n          1.2153066666666668,\n          0.9127591666666667,\n          0.5835116666666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_v_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.238751571216335,\n        \"min\": -22.934250000000002,\n        \"max\": 30.421518333333335,\n        \"num_unique_values\": 41930,\n        \"samples\": [\n          -11.334999999999999,\n          -0.27726778370190397,\n          2.8858487031700286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_v_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.31139558825728914,\n        \"min\": 0.0,\n        \"max\": 7.07663343923749,\n        \"num_unique_values\": 41497,\n        \"samples\": [\n          0.2873066666666667,\n          0.61682,\n          0.42457333333333336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_temp_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.339868263373039,\n        \"min\": 0.0,\n        \"max\": 23.42511904761905,\n        \"num_unique_values\": 36803,\n        \"samples\": [\n          0.28887937780141304,\n          0.1090966819873889,\n          0.22191829370204358\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_temp_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01891027226401017,\n        \"min\": 0.005,\n        \"max\": 0.1232625,\n        \"num_unique_values\": 40255,\n        \"samples\": [\n          0.05988660193344982,\n          0.0518086548469194,\n          0.054349976449137735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_rh_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.118862538213861,\n        \"min\": 27.06683333333333,\n        \"max\": 100.7,\n        \"num_unique_values\": 41030,\n        \"samples\": [\n          75.08208333333333,\n          67.96480274394513,\n          61.373863222735544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_rh_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.585822667847409,\n        \"min\": 0.006,\n        \"max\": 2.91172,\n        \"num_unique_values\": 41848,\n        \"samples\": [\n          1.6020120615860411,\n          1.2962067362834562,\n          1.5199758013248825\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_press_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.74968256822361,\n        \"min\": 990.1022295081967,\n        \"max\": 1030.0,\n        \"num_unique_values\": 38809,\n        \"samples\": [\n          1012.5926666666667,\n          1016.0335839919566,\n          1012.4297619538519\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_press_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02344540488375646,\n        \"min\": 0.01,\n        \"max\": 0.2116725,\n        \"num_unique_values\": 39782,\n        \"samples\": [\n          0.06269369016710574,\n          0.044941666666666664,\n          0.06425025441309355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_temp_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.659135138303624,\n        \"min\": 0.45022666666666666,\n        \"max\": 22.7441065,\n        \"num_unique_values\": 42253,\n        \"samples\": [\n          4.3989199999999995,\n          5.5429691666666665,\n          7.0812375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_temp_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01447396755540512,\n        \"min\": 0.0,\n        \"max\": 0.07643527777777778,\n        \"num_unique_values\": 27058,\n        \"samples\": [\n          0.02482222222222222,\n          0.032391249999999996,\n          0.0034658333333333334\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_salinity_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4635254449253371,\n        \"min\": 29.711866666666666,\n        \"max\": 32.788981666666665,\n        \"num_unique_values\": 39380,\n        \"samples\": [\n          31.563670000000002,\n          31.53621111111111,\n          31.335293333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_salinity_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.005872750772783584,\n        \"min\": 0.0,\n        \"max\": 0.03807,\n        \"num_unique_values\": 17719,\n        \"samples\": [\n          0.016420833333333336,\n          0.008256666666666667,\n          0.0014425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_cond_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5701702115237591,\n        \"min\": 2.6322933333333336,\n        \"max\": 4.5524725,\n        \"num_unique_values\": 36671,\n        \"samples\": [\n          3.61938,\n          2.918461666666667,\n          3.826\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_cond_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004127408699507264,\n        \"min\": 0.0,\n        \"max\": 0.06851499999999999,\n        \"num_unique_values\": 10907,\n        \"samples\": [\n          0.007321666666666666,\n          0.0023158333333333334,\n          0.0028166666666666665\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Join interpolated env vars to images (by exact image time)\n","merged_env = bin_time_df.merge(env_merged, on=\"time\", how=\"left\")\n","\n","\n","def normalize_bin_id(x):\n","    if pd.isna(x):\n","        return x\n","    x = str(x).strip().upper()\n","    # split into parts: e.g. IFCB1_2013_288_173355\n","    parts = x.split('_')\n","    if len(parts) == 4:\n","        inst, year, doy, count = parts\n","        # ensure day of year is 3 digits and count is 6 digits\n","        doy = doy.zfill(3)\n","        count = count.zfill(6)\n","        return f\"{inst}_{year}_{doy}_{count}\"\n","    return x\n","\n","# Apply normalization\n","images_df['bin_id_norm'] = images_df['bin_id'].apply(normalize_bin_id)\n","merged_env['bin_id_norm'] = merged_env['bin_id'].apply(normalize_bin_id)\n","\n","# Merge on normalized ID\n","merged_df = merged_env.merge(\n","    images_df[['bin_id_norm', 'image_path']],\n","    on='bin_id_norm',\n","    how='left'\n",")\n","\n","final_df = merged_env.merge(\n","    images_df[['bin_id', 'image_path']],  # only keep relevant columns from images_df\n","    on='bin_id',\n","    how='right'  # or 'inner' depending on whether you want to keep all rows from merged_env\n",")\n","\n","# Optional: sanity check missing env rows after interpolation (should be rare unless times are outside env data range)\n","missing_env = final_df[num_cols].isna().all(axis=1).sum() if num_cols else 0\n","if missing_env:\n","    print(f\"Note: {missing_env} images have no interpolated env values (likely out of env time range).\")\n","\n","print(f\"Final rows: {len(final_df):,}\")\n","final_df.head(3)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":233},"id":"BwbwKTA5SsCx","executionInfo":{"status":"ok","timestamp":1755812080926,"user_tz":420,"elapsed":274,"user":{"displayName":"Ethan Feldman","userId":"01965624025368250252"}},"outputId":"dc0157b8-c452-41be-9450-3f644c19d8ac"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Final rows: 18,426\n"]},{"output_type":"execute_result","data":{"text/plain":["                       time                 bin_id  wspd_u_mean  wspd_u_std  \\\n","0 2014-10-04 16:54:30+00:00  IFCB1_2014_277_165430     -5.34300    0.717175   \n","1 2014-07-07 21:57:02+00:00  IFCB1_2014_188_215702     -7.88885    0.635593   \n","2 2014-07-07 22:20:13+00:00  IFCB1_2014_188_222013     -7.66610    0.589921   \n","\n","   wspd_v_mean  wspd_v_std  air_temp_mean  air_temp_std  air_rh_mean  \\\n","0     3.444250    0.471600      14.923977      0.036602    92.155000   \n","1    -6.134833    0.653918      19.400000      0.018813    95.025833   \n","2    -6.571408    0.563805      19.200000      0.014249    95.204333   \n","\n","   air_rh_std  air_press_mean  air_press_std  water_temp_mean  water_temp_std  \\\n","0    0.140700     1004.127500       0.033325        17.977675        0.005175   \n","1    0.047292     1007.300000       0.034038        17.240370        0.051220   \n","2    0.034043     1007.302167       0.041935        17.224039        0.045632   \n","\n","   water_salinity_mean  water_salinity_std  water_cond_mean  water_cond_std  \\\n","0            31.555450            0.001000         4.182275        0.000000   \n","1            30.938578            0.024000         4.042335        0.002148   \n","2            30.939293            0.010946         4.040859        0.002989   \n","\n","             bin_id_norm                                         image_path  \n","0  IFCB1_2014_277_165430  /content/drive/MyDrive/Plankton/WHOI_unzipped_...  \n","1  IFCB1_2014_188_215702  /content/drive/MyDrive/Plankton/WHOI_unzipped_...  \n","2  IFCB1_2014_188_222013  /content/drive/MyDrive/Plankton/WHOI_unzipped_...  "],"text/html":["\n","  <div id=\"df-bed62b0c-7ba0-46b8-94e5-0aaf4a071554\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>time</th>\n","      <th>bin_id</th>\n","      <th>wspd_u_mean</th>\n","      <th>wspd_u_std</th>\n","      <th>wspd_v_mean</th>\n","      <th>wspd_v_std</th>\n","      <th>air_temp_mean</th>\n","      <th>air_temp_std</th>\n","      <th>air_rh_mean</th>\n","      <th>air_rh_std</th>\n","      <th>air_press_mean</th>\n","      <th>air_press_std</th>\n","      <th>water_temp_mean</th>\n","      <th>water_temp_std</th>\n","      <th>water_salinity_mean</th>\n","      <th>water_salinity_std</th>\n","      <th>water_cond_mean</th>\n","      <th>water_cond_std</th>\n","      <th>bin_id_norm</th>\n","      <th>image_path</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2014-10-04 16:54:30+00:00</td>\n","      <td>IFCB1_2014_277_165430</td>\n","      <td>-5.34300</td>\n","      <td>0.717175</td>\n","      <td>3.444250</td>\n","      <td>0.471600</td>\n","      <td>14.923977</td>\n","      <td>0.036602</td>\n","      <td>92.155000</td>\n","      <td>0.140700</td>\n","      <td>1004.127500</td>\n","      <td>0.033325</td>\n","      <td>17.977675</td>\n","      <td>0.005175</td>\n","      <td>31.555450</td>\n","      <td>0.001000</td>\n","      <td>4.182275</td>\n","      <td>0.000000</td>\n","      <td>IFCB1_2014_277_165430</td>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2014-07-07 21:57:02+00:00</td>\n","      <td>IFCB1_2014_188_215702</td>\n","      <td>-7.88885</td>\n","      <td>0.635593</td>\n","      <td>-6.134833</td>\n","      <td>0.653918</td>\n","      <td>19.400000</td>\n","      <td>0.018813</td>\n","      <td>95.025833</td>\n","      <td>0.047292</td>\n","      <td>1007.300000</td>\n","      <td>0.034038</td>\n","      <td>17.240370</td>\n","      <td>0.051220</td>\n","      <td>30.938578</td>\n","      <td>0.024000</td>\n","      <td>4.042335</td>\n","      <td>0.002148</td>\n","      <td>IFCB1_2014_188_215702</td>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2014-07-07 22:20:13+00:00</td>\n","      <td>IFCB1_2014_188_222013</td>\n","      <td>-7.66610</td>\n","      <td>0.589921</td>\n","      <td>-6.571408</td>\n","      <td>0.563805</td>\n","      <td>19.200000</td>\n","      <td>0.014249</td>\n","      <td>95.204333</td>\n","      <td>0.034043</td>\n","      <td>1007.302167</td>\n","      <td>0.041935</td>\n","      <td>17.224039</td>\n","      <td>0.045632</td>\n","      <td>30.939293</td>\n","      <td>0.010946</td>\n","      <td>4.040859</td>\n","      <td>0.002989</td>\n","      <td>IFCB1_2014_188_222013</td>\n","      <td>/content/drive/MyDrive/Plankton/WHOI_unzipped_...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bed62b0c-7ba0-46b8-94e5-0aaf4a071554')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bed62b0c-7ba0-46b8-94e5-0aaf4a071554 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bed62b0c-7ba0-46b8-94e5-0aaf4a071554');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-dedf635d-875d-4ba4-b310-94d622ac90f4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dedf635d-875d-4ba4-b310-94d622ac90f4')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-dedf635d-875d-4ba4-b310-94d622ac90f4 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"final_df","summary":"{\n  \"name\": \"final_df\",\n  \"rows\": 18426,\n  \"fields\": [\n    {\n      \"column\": \"time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2014-01-02 20:15:55+00:00\",\n        \"max\": \"2014-12-26 02:46:56+00:00\",\n        \"num_unique_values\": 134,\n        \"samples\": [\n          \"2014-12-26 00:50:55+00:00\",\n          \"2014-05-30 19:47:13+00:00\",\n          \"2014-06-25 08:32:46+00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bin_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 134,\n        \"samples\": [\n          \"IFCB5_2014_360_005055\",\n          \"IFCB1_2014_150_194713\",\n          \"IFCB1_2014_176_083246\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_u_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.772133219832749,\n        \"min\": -13.047916666666666,\n        \"max\": 8.587266666666666,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          3.4662916666666663,\n          -4.728749255523535,\n          -2.6723166666666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_u_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47293905542797554,\n        \"min\": 0.10611787072243346,\n        \"max\": 2.0472541666666664,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          0.4814541666666666,\n          0.46962305235350627,\n          0.4594183333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_v_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.977730700869227,\n        \"min\": -10.906666666666666,\n        \"max\": 15.004666666666665,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          -7.938333333333333,\n          2.3596664265129683,\n          -6.235333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wspd_v_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2740196623670656,\n        \"min\": 0.09535916666666666,\n        \"max\": 1.3666583333333333,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          0.35235,\n          0.36169925072046105,\n          0.32825333333333334\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_temp_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.778034046810197,\n        \"min\": 0.0,\n        \"max\": 21.92383333333333,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          19.617416666666667,\n          19.8,\n          20.15675\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_temp_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013136414159457306,\n        \"min\": 0.005235741444866923,\n        \"max\": 0.08343,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          0.025343333333333332,\n          0.040363333333333334,\n          0.016725492700729927\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_rh_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.612506722525604,\n        \"min\": 39.9564,\n        \"max\": 99.9,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          62.98833333333334,\n          97.90899999999999,\n          58.414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_rh_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5265861657485613,\n        \"min\": 0.007,\n        \"max\": 1.70875,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          0.35491,\n          0.054753333333333334,\n          0.42466\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_press_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.724717159460213,\n        \"min\": 999.8726666666666,\n        \"max\": 1029.3675,\n        \"num_unique_values\": 124,\n        \"samples\": [\n          1016.2045,\n          1025.6868333333332,\n          1017.1746666666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"air_press_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03138558483415355,\n        \"min\": 0.010261934938741023,\n        \"max\": 0.12722,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          0.04426666666666666,\n          0.022217653698366955,\n          0.031893333333333336\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_temp_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.8042760915852964,\n        \"min\": 0.7809550000000001,\n        \"max\": 20.974425,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          6.8489125,\n          13.178475,\n          16.595403333333334\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_temp_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.017002385474616976,\n        \"min\": 0.001,\n        \"max\": 0.0613375,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          0.009091666666666666,\n          0.029783333333333332,\n          0.02049\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_salinity_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.41047471565501203,\n        \"min\": 30.7839075,\n        \"max\": 32.591125000000005,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          31.964004166666665,\n          31.521195833333334,\n          30.915893333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_salinity_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.007846973975708974,\n        \"min\": 0.001,\n        \"max\": 0.034903333333333335,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          0.01925333333333333,\n          0.01354,\n          0.013448333333333333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_cond_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.600559501044402,\n        \"min\": 2.651815,\n        \"max\": 4.486880833333333,\n        \"num_unique_values\": 129,\n        \"samples\": [\n          4.013446666666667,\n          2.9447200000000002,\n          4.308224166666667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"water_cond_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003981893921667158,\n        \"min\": 0.0,\n        \"max\": 0.024630000000000003,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          0.0049050000000000005,\n          0.0043875,\n          0.0044825\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bin_id_norm\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 134,\n        \"samples\": [\n          \"IFCB5_2014_360_005055\",\n          \"IFCB1_2014_150_194713\",\n          \"IFCB1_2014_176_083246\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18426,\n        \"samples\": [\n          \"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/2014/Cylindrotheca/IFCB5_2014_238_215151_03428.png\",\n          \"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/2014/dino30/IFCB1_2014_176_153037_01301.png\",\n          \"/content/drive/MyDrive/Plankton/WHOI_unzipped_data/2014/dino30/IFCB1_2014_188_222013_04271.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["final_df.to_csv(OUT_CSV, index=False)\n","print(\"Saved:\", OUT_CSV)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sswfu3ivSuLB","executionInfo":{"status":"ok","timestamp":1755812083360,"user_tz":420,"elapsed":2433,"user":{"displayName":"Ethan Feldman","userId":"01965624025368250252"}},"outputId":"51967275-9911-45a9-e936-e72237660309"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Saved: /content/drive/MyDrive/Plankton/ifcb_merged_dataframe.csv\n"]}]}]}